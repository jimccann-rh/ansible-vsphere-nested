---

- name: Include vars of vcenter_host.yml
  ansible.builtin.include_vars:
    file: vcenter_host.yml
    name: vcenter

- debug:
    msg:
     - "{{ play_hosts.index(inventory_hostname) }}"
     - "{{ ansible_play_hosts.index(inventory_hostname) }}"
#     - "{{ hostvars[inventory_hostname].ansible_host }}"

#- name: vCenter tweaks
- block:
    - name: Create Datacenter
      community.vmware.vmware_datacenter:
        datacenter_name: '{{ item }}'
        state: present
      loop:
        - '{{ vcenter.vc_fact_datacenter1 }}'
#        - '{{ vcenter.vc_fact_datacenter2 }}'
    
    - name: Create Cluster
      community.vmware.vmware_cluster:
        datacenter_name: '{{ item.datacenter }}'
        cluster_name: '{{ item.cluster }}'
      loop:
        - { 'cluster': '{{ vcenter.vc_fact_cluster1 }}', 'datacenter': '{{ vcenter.vc_fact_datacenter1  }}' }
#        - { 'cluster': '{{ vcenter.vc_fact_cluster2 }}', 'datacenter': '{{ vcenter.vc_fact_datacenter2  }}' }

   
    - name: Enable DRS and set default VM behavior to fully automated
      community.vmware.vmware_cluster_drs:
        datacenter: '{{ vcenter.vc_fact_datacenter1 }}'
        cluster_name: '{{ vcenter.vc_fact_cluster1 }}'
        enable: True
        drs_default_vm_behavior: fullyAutomated
        #drs_default_vm_behavior: partiallyAutomated

    - set_fact:
        advs: { "das.ignoreInsufficientHbDatastore": "True", "das.ignoreRedundantNetWarning": "True" }

    - name: Enable HA without admission control
      community.vmware.vmware_cluster_ha:
        datacenter: '{{ vcenter.vc_fact_datacenter1 }}'
        cluster_name: '{{ vcenter.vc_fact_cluster1 }}'
        enable: true
        advanced_settings: "{{ advs }}"

  delegate_to: localhost
  run_once: true
  module_defaults:
    group/vmware:
      hostname: '{{ vcenter.vc_fact_ip }}'
      username: 'administrator@{{ vcenter.vc_fact_domain }}'
      password: "{{ lookup('ansible.builtin.env', 'VCESXIPASSWORD') }}"
      validate_certs: false


#- name: ESXi tweaks 
- block:

    - debug:
        msg:
          - '{{ vcenter.vc_fact_datacenter1 }}'
          - '{{ vcenter.vc_fact_cluster1 }}'
#          - "{{ hostvars[inventory_hostname].ansible_host_ip }}"
          - "{{ lookup('ansible.builtin.env', 'VCESXIPASSWORD') }}"

    - name: "Add ESXi Host {{ hostvars[groups['esxi'][my_idx]].NESTEDVMIP }} to vCenter {{ vcenter.vc_fact_ip }}"
      community.vmware.vmware_host:
        datacenter: "{{ vcenter.vc_fact_datacenter1 }}"
        cluster: "{{ vcenter.vc_fact_cluster1 }}"
        #esxi_hostname: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        esxi_username: "root"
        esxi_password: "{{ lookup('ansible.builtin.env', 'VCESXIPASSWORD') }}"
        state: present
      when: '"1" in hostvars[groups["esxi"][my_idx]].DC | string'

    - name: "Add ESXi Host {{ hostvars[groups['esxi'][my_idx]].NESTEDVMIP }} to vCenter {{ vcenter.vc_fact_ip }}"
      community.vmware.vmware_host:
        datacenter: "{{ vcenter.vc_fact_datacenter2 }}"
        cluster: "{{ vcenter.vc_fact_cluster2 }}"
        #esxi_hostname: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        esxi_username: "root"
        esxi_password: "{{ lookup('ansible.builtin.env', 'VCESXIPASSWORD') }}"
        state: present
      when: '"2" in hostvars[groups["esxi"][my_idx]].DC | string'

    - name: Set the Power Management Policy of all host systems from cluster to high-performance
      community.vmware.vmware_host_powermgmt_policy:
        cluster_name: '{{ vcenter.vc_fact_cluster1 }}'
        policy: high-performance
    
    - name: Update for system defaults config
      community.vmware.vmware_host_auto_start:
        #esxi_hostname: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        system_defaults:
          enabled: true
          start_delay: 100
          stop_action: guestShutdown
          wait_for_heartbeat: true

    - name: Get host facts
      community.vmware.vmware_host_facts:
        hostname: '{{ vcenter.vc_fact_ip }}'
        #hostname: '{{ vcenter.vc_fact_hostname }}.{{ vcenter.vc_fact_domain }}'
        username: "administrator@{{ vcenter.vc_fact_domain }}"
        password: '{{ vcenter.vc_fact_password }}'
        #esxi_hostname: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        #esxi_hostname: '{{ inventory_hostname }}'
        validate_certs: false
      register: host_facts
    
    - debug:
        msg:
         - "{{ host_facts }}"

    - name: Get host facts 2
      community.vmware.vmware_host_facts:
        hostname: '{{ vcenter.vc_fact_ip }}'
        #hostname: '{{ vcenter.vc_fact_hostname }}.{{ vcenter.vc_fact_domain }}'
        username: "administrator@{{ vcenter.vc_fact_domain }}"
        password: '{{ vcenter.vc_fact_password }}'
        #esxi_hostname: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        esxi_hostname: "{{ hostvars[groups['esxi'][my_idx]].NESTEDVMIP }}"
        #esxi_hostname: '{{ inventory_hostname }}'
        schema: vsphere
        properties:
#          - hardware 
#          - hardware.memorySize
#          - hardware.cpuInfo.numCpuCores
#          - config.product.apiVersion
#          - config
#          - config.storageDevice
          - config.storageDevice.plugStoreTopology.path
#          - config.storageDevice.plugStoreTopology.path.name.0
          - overallStatus
        validate_certs: false
      register: host_facts2

    - debug:
        msg:
#         - "{{ host_facts2.config.overallStatus }}"
#         - "{{ host_facts2.config.storageDevice.plugStoreTopology.path }}"
#         - "{{ host_facts2 }}"
#         - "{{ host_facts2[0] }}"
         - "{{ host_facts2['ansible_facts']['config']['storageDevice']['plugStoreTopology']['path'][1]['name'] }}"
         - "{{ host_facts2['ansible_facts']['config']['storageDevice']['plugStoreTopology']['path'][1] }}"

    - set_fact:
        vmfs_dn: "mpx.{{ host_facts2['ansible_facts']['config']['storageDevice']['plugStoreTopology']['path'][1]['name'] }}"


    - debug:
        msg:
          - "{{ vmfs_dn }}"

    - name: Create datastore
      vmware_host_datastore:
        validate_certs: false
        #esxi_hostname: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        datastore_name: "Datastore-{{ hostvars[groups['esxi'][my_idx]].NESTEDVMIP }}"
        #datastore_name: "Datastore-{{ hostvars[inventory_hostname].ansible_host_ip }}"
        vmfs_device_name: "{{ vmfs_dn }}"
        vmfs_version: 6
        datastore_type: vmfs
        state: present
      delegate_to: localhost


    - name: Include vars nfs
      ansible.builtin.include_vars:
        file: nfshostip.yml
      when: nfsetup | bool   

    - name: Mount NFS datastores to NESTED ESXi
      community.vmware.vmware_host_datastore:
        #esxi_hostname: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        datastore_name: '{{ item.name }}'
        datastore_type: '{{ item.type }}'
        nfs_server: '{{ item.server }}'
        nfs_path: '{{ item.path }}'
        nfs_ro: '{{ item.nfs_ro }}'
        state: present
        validate_certs: false
#      delegate_to: localhost
      loop:
          - { 'name': '{{ nfsname }}', 'server': '{{ nfserver }}', 'path': '{{ sharepoint }}', 'type': 'nfs41', 'nfs_ro': 'true'}
          - { 'name': '{{ nfsname2 }}', 'server': '{{ nfserver2 }}', 'path': '{{ sharepoint2 }}', 'type': 'nfs41', 'nfs_ro': 'false'}
      when: nfsetup | bool   


    - name: Copy iso file to datastore
      community.vmware.vsphere_copy:
        src: "files/Fedora-Workstation-Live-x86_64-39-1.5.iso"
        #src: "/data/export/share/Fedora-Workstation-Live-x86_64-39-1.5.iso"
        datacenter: "{{ vcenter.vc_fact_datacenter1 }}"
        #datacenter: "{{ vcenter.vc_datacenter }}"
        datastore: fs-cicluster-nfs
        path: "/Fedora-Workstation-Live-x86_64-39-1.5.iso"
        timeout: 900
        validate_certs: false
      delegate_to: localhost
      #delegate_to: "{{ groups['web'][0] }}"
      when: nfsetup | bool and nfsiso | bool and localcy | bool
      run_once: true


    - name: Copy iso file to datastore remote
      community.vmware.vsphere_copy:
        #src: "files/Fedora-Workstation-Live-x86_64-39-1.5.iso"
        src: "/data/export/share/Fedora-Workstation-Live-x86_64-39-1.5.iso"
        datacenter: "{{ vcenter.vc_fact_datacenter1 }}"
        datastore: fs-cicluster-nfs
        path: "/Fedora-Workstation-Live-x86_64-39-1.5.iso"
        timeout: 900
        validate_certs: false
      #delegate_to: localhost
      delegate_to: "{{ groups['web'][0] }}"
      when: nfsetup | bool and nfsiso | bool and not localcy | bool
      run_once: true


    -  name: Enable vMotion for Nested
       community.vmware.vmware_vmkernel:
         vswitch_name: vSwitch0
         portgroup_name: "Management Network"
         enable_vmotion: true
         enable_mgmt: true
         device: vmk0
         network:
           type: 'dhcp'
 
 
    - name: Exit Maintenance Mode
      community.vmware.vmware_maintenancemode:
        #esxi_hostname: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        timeout: 3600
        state: absent

  ignore_errors: true
  delegate_to: localhost
  module_defaults:
    group/vmware:
      hostname: '{{ vcenter.vc_fact_ip }}'
      username: 'administrator@{{ vcenter.vc_fact_domain }}'
      password: "{{ lookup('ansible.builtin.env', 'VCESXIPASSWORD') }}"
      esxi_hostname: "{{ hostvars[groups['esxi'][my_idx]].NESTEDVMIP }}"
      validate_certs: false



